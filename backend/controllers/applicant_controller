package controllers

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"time"

	"backend/db"
	"backend/models"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type ApplicantController struct {
	collection *mongo.Collection
}

func NewApplicantController() *ApplicantController {
	return &ApplicantController{
		collection: db.GetCollection("applicants"),
	}
}

func (ac *ApplicantController) GetAll(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	cursor, err := ac.collection.Find(ctx, bson.M{})
	if err != nil {
		http.Error(w, "Failed to fetch applicants", http.StatusInternalServerError)
		log.Println("MongoDB Find applicants error: ", err)
		return
	}
	defer cursor.Close(ctx)

	var applicants []models.Applicant
	if err = cursor.All(ctx, &applicants); err != nil {
		http.Error(w, "Error decoding applicants", http.StatusInternalServerError)
		log.Println("Cursor decode error:", err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(applicants)
}

func (ac *ApplicantController) GetById(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement getting single applicant by ID
}

func (ac *ApplicantController) Create(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement creating new applicant
}

func (ac *ApplicantController) Update(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement updating applicant
}
